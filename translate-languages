#!/usr/bin/env python3
import os
import json
import subprocess
import locale

from icu import Locale

from gettext import gettext as _

_default_lang = '%s.%s' % locale.getdefaultlocale()


def read_all_languages():
    fdp = subprocess.Popen(['locale', '-av'], stdout=subprocess.PIPE)
    lines = fdp.stdout.read().decode('utf-8', 'ignore').split('\n')
    locales = []

    for line in lines:
        if line.find('locale:') != -1:
            locale_str = line.split()[1]
        elif line.find('title |') != -1:
            title = line.lstrip('title |')
        elif line.find('language |') != -1:
            lang = line.lstrip('language |')
            # Sometimes language is a language code, not the language name
            if len(lang) <= 3:
                lang = title.split()[0]
        elif line.find('territory |') != -1:
            territory = line.lstrip('territory |')
            # Sometimes territory is a territory code, not the territory name
            if len(territory) <= 3 and territory != 'USA':
                if ' locale for ' in title:
                    territory = title.split(' locale for ')[-1]
                    # Aesthetic cleanup up for titles with trailing .
                    if territory[-1] == '.':
                        territory = territory[:-1]
                else:
                    territory = title.split()[-1]
            if locale_str.endswith('utf8') and len(lang):
                locales.append((lang, territory, locale_str))

    locales.sort()
    return locales


def get_native_locales():
    languages = read_all_languages()
    locales = {}

    for language, country, code in languages:
        if language not in locales.keys():
            l = Locale(code)
            locales[language] = l.getDisplayName(l).title().split(' ')[0]

    return locales

if __name__ == "__main__":
    languages = get_native_locales()
    print(json.dumps(languages, indent=4))
